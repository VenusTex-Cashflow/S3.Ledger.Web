@page "/invoicecomponent"
@using static T3.S3Ledger.Web.Enums
@inject HttpClient Http
@inject NavigationManager navigation
@inject DialogService dialog

<h3>Customer Bills</h3>

@if (invoices == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click="@InsertRow" />
    <RadzenDataGrid @ref="invoicesGrid" PagerPosition="PagerPosition.TopAndBottom" AllowSorting="true" AllowVirtualization="true" AllowPaging="true" PageSize="16" RowSelect=@(args => OnRowClick(args)) Data="@invoices" TItem="InvoiceModel" Context="invoice" ColumnWidth="100px">
        <Columns>
            <RadzenDataGridColumn TItem="InvoiceModel" Title="Customer Name" Property="Customer.CustomerName">
                <Template Context="invoice">
                    @invoice.Customer?.CustomerName
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="InvoiceModel" Property="InvoiceDate" Title="Date">
                <Template Context="invoice">
                    @String.Format("{0:dd/MM/yyyy}", invoice.InvoiceDate)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="InvoiceModel" Property="Amount" Title="Invoice Amount" TextAlign="TextAlign.Right">
                <Template Context="invoice">
                    @String.Format("{0:#,##0.##}", invoice.Amount)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="InvoiceModel" Context="invoice" TextAlign="TextAlign.Center" Width="50px" Filterable="false" Sortable="false">
                <Template Context="invoice">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small"
                                  Click="@(args => dialog.Confirm("Are you sure?", "Delete Bills", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" }))">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>
            <RadzenGridColumn TItem="CustomerModel" Context="customer" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="50px">
                <Template Context="customer">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small"
                                  Click=@(args => dialog.Confirm("Are you sure?", "Delete Customer", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" })) />
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    RadzenDataGrid<InvoiceModel> invoicesGrid;
    List<InvoiceModel> invoices;
    InvoiceModel selectedInvoice;


    dynamic _invoice;
    dynamic invoice
    {
        get
        {
            return _invoice;
        }
        set
        {
            if (_invoice != value)
            {
                _invoice = value;
                StateHasChanged();
            }
        }
    }

    protected async Task OnRowClick(InvoiceModel args)
    {
        await Task.Run(() => 0);
    }

    protected override async Task OnInitializedAsync()
    {
        invoices = await GetInvoices();
        dialog.OnClose += Close;
    }

    void InsertRow()
    {
        navigation.NavigateTo("/addinvoicecomponent");
    }



    async Task<List<InvoiceModel>> GetInvoices()
    {
        return await Http.GetFromJsonAsync<List<InvoiceModel>>("/api/invoice");
    }


    async void Close(dynamic result)
    {
        if (result)
        {
            selectedInvoice = (InvoiceModel)invoicesGrid.Value[0];
            CustomerModel custUpdate;
            if (invoices.Contains(selectedInvoice))
            {
                await Http.DeleteAsync("/api/invoice/" + selectedInvoice.Id);
                invoices.Remove(selectedInvoice);
                await invoicesGrid.Reload();

                // update customer
                //custUpdate = await Http.GetFromJsonAsync<CustomerModel>("/api/customer/" + selectedInvoice.CustomerId);
                //custUpdate.TotalInvoicedAmount = custUpdate.TotalInvoicedAmount.HasValue ? custUpdate.TotalInvoicedAmount : 0;
                //custUpdate.TotalOutstandingAmount = custUpdate.TotalOutstandingAmount.HasValue ? custUpdate.TotalOutstandingAmount : 0;
                //custUpdate.TotalInvoicedAmount -= selectedInvoice.Amount;
                //custUpdate.TotalOutstandingAmount -= selectedInvoice.Amount;
                //await Http.PutAsJsonAsync<CustomerModel>("/api/customer", custUpdate);

            }
        }
    }

    void EditRow(InvoiceModel invoice)
    {
        navigation.NavigateTo("/editinvoicecomponent/" + invoice.Id);
    }

}
