@page "/addpaymentcomponent"

@using static T3.S3Ledger.Web.Enums
@inject HttpClient Http
@inject NavigationManager navigation

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>

@if (payment == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenTemplateForm Data="@payment" Submit="@((PaymentReceiptModel args) => { Submit(args).ConfigureAwait(true); })">
        <div class="row">
            <div class="col-md-8">
                <RadzenFieldset Text="Cash Receipt">
                    <div class="row">
                        <div class="align-items-center d-flex col-md-4">
                            <RadzenLabel Text="Customer" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDownDataGrid TValue="long" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Placeholder="Select..." style="width: 100%;" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true" TextProperty="CustomerName" ValueProperty="Id" Data=@customers Change="@(args => OnChange(args))" @bind-Value=@customerId />
                        </div>
                    </div>
                    <div class="row">
                        <div class="align-items-center d-flex col-md-4">
                            <RadzenLabel Text="Cash Received Date" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDatePicker @bind-Value="payment.PaidDate" Disabled="false" Placeholder="Date" style="width: 100%;" Name="PaymentDate" DateFormat="MMM d, yyyy" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="align-items-center d-flex col-md-4">
                            <RadzenLabel Text="Amount" />
                        </div>
                        <div class="col-md-8">
                            <RadzenNumeric @bind-Value="payment.AmountPaid" Disabled="false" style="width: 100%;" Name="Amount" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="align-items-center d-flex col-md-4">
                            <RadzenLabel Text="Payment method" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="payment.PaymentType" Placeholder="Select..." Data="@(Enum.GetValues(typeof(PaymentType)).Cast<PaymentType>().Select(t => new { Text = t, Value = t }))" style="width: 100%;" TextProperty="Text" ValueProperty="Value" Name="PaymentMode">
                            </RadzenDropDown>
                        </div>
                    </div>
                </RadzenFieldset>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" />
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
            </div>
        </div>
    </RadzenTemplateForm>
}

@code {
    private PaymentReceiptModel payment = new PaymentReceiptModel()
    {
        CreatedDate = DateTime.Today.Date,
        OrganizationId = 1,
        PaymentType = PaymentType.BillToBill,

    };

    List<CustomerModel> customers;

    private CustomerModel customer;
    long customerId;


    protected override async Task OnInitializedAsync()
    {
        customers = await Http.GetFromJsonAsync<List<CustomerModel>>("/api/customer");

    }


    private async Task Submit(PaymentReceiptModel arg)
    {
        arg.CustomerId = customerId;
        // update customer
        customer = await Http.GetFromJsonAsync<CustomerModel>("/api/customer/" + customerId);
        customer.TotalAmountSettled = customer.TotalAmountSettled.HasValue ? customer.TotalAmountSettled : 0;
        customer.TotalOutstandingAmount = customer.TotalOutstandingAmount.HasValue ? customer.TotalOutstandingAmount : 0;
        customer.TotalAmountSettled += arg.AmountPaid;
        customer.TotalOutstandingAmount -= arg.AmountPaid;
        //customer.TotalOutstandingAmount = customer.TotalOutstandingAmount < 0 ? 0 : customer.TotalOutstandingAmount;
        await Http.PutAsJsonAsync<CustomerModel>("/api/customer", customer);

        await Http.PostAsJsonAsync<PaymentReceiptModel>("/api/paymentreceipt", arg);
        navigation.NavigateTo("/paymentcomponent");
    }

    void Cancel()
    {
        navigation.NavigateTo("/paymentcomponent");
    }

    void OnChange(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
    }
}
