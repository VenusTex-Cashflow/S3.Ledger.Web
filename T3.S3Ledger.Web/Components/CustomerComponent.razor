@page "/customercomponent"
@using static T3.S3Ledger.Web.Enums
@inject HttpClient Http
@inject NavigationManager navigation
@inject DialogService dialog


<h3>Customers List</h3>

@if (customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click="@InsertRow" />
    <RadzenGrid @ref="customersGrid" PagerPosition="PagerPosition.Top" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="12" AllowSorting="true" Data="@customers" RowSelect=@(args => OnRowClick(args)) TItem="CustomerModel">
        <Columns>
            <RadzenGridColumn TItem="CustomerModel" Property="CustomerType" Title="Customer Type" Width="100px">
                <FilterTemplate>
                    <RadzenDropDown @bind-Value="@currentCustType" TextProperty="Text" ValueProperty="Value" Style="width:100%; font-size:small" Change=@OnChange
                                    Data="@(Enum.GetValues(typeof(CustomerType)).Cast<CustomerType>().Select(t => new { Text = $"{t}", Value = t }))" />
                </FilterTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="CustomerModel" Property="CustomerName" Title="Customer Name" Width="150px" />
            <RadzenGridColumn TItem="CustomerModel" Context="customer" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="50px">
                <Template Context="customer">
                    <RadzenButton Icon="edit" Size="ButtonSize.Small" Click=@(args => EditRow(customer.Id))>
                    </RadzenButton>
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="CustomerModel" Context="customer" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="50px">
                <Template Context="customer">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click=@(args => dialog.Confirm("Are you sure?", "Delete Customer", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" })) />
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>

}

@code {
    RadzenGrid<CustomerModel> customersGrid;
    List<CustomerModel> customers;
    CustomerType currentCustType;
    CustomerModel selectedCustomer;


    protected async Task OnRowClick(CustomerModel args)
    {
        await Task.Run(() => 0);
    }

    protected override async Task OnInitializedAsync()
    {
        customers = await GetCustomers();
        dialog.OnClose += Close;
    }


    void Close(dynamic result)
    {
        if (result)
        {
            selectedCustomer = (CustomerModel)customersGrid.Value;
            if (customers.Contains(selectedCustomer))
            {
                Http.DeleteAsync("/api/customer/" + selectedCustomer.Id);
                customers.Remove(selectedCustomer);
                customersGrid.Reload();
            }
        }
    }


    void InsertRow()
    {
        navigation.NavigateTo("/addcustomercomponent");
    }

    async Task<List<CustomerModel>> GetCustomers()
    {
        try
        {
            var customers = await Http.GetFromJsonAsync<List<CustomerModel>>("/api/customer");
            return customers;
        }
        catch (Exception ex)
        {

            throw ex;
        }

    }



    void EditRow(long Id)
    {
        navigation.NavigateTo("/editcustomercomponent/" + Id);
    }

    async Task OnChange()
    {
        customers = await GetCustomers();
        if (currentCustType.ToString() != CustomerType.Select.ToString())
        {
            customers = customers.Where(i => i.CustomerType == currentCustType).ToList<CustomerModel>();
        }
    }
}
