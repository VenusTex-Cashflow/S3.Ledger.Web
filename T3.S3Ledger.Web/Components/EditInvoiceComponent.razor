@page "/editinvoicecomponent/{id:long}"
@using static T3.S3Ledger.Web.Enums
@using System.Linq;
@inject HttpClient Http
@inject NavigationManager navigation

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>

@if (invoice == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenTemplateForm Data="@invoice" Submit="@((InvoiceModel args) => { Submit(args).ConfigureAwait(true); })">
        <div class="row">
            <div class="col-md-8">
                <RadzenFieldset Text="Invoice Info">
                    <div class="row">
                        <div class="align-items-center d-flex col-md-4">
                            <RadzenLabel Text="Customer" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDownDataGrid TValue="long" @bind-Value=invoice.CustomerId Placeholder="Select customer" AllowClear="true" AllowFiltering="true" Data="@(customers)" TextProperty="FirstName" ValueProperty="Id" Style="width: 100%" SelectedValue="invoice.CustomerId" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="align-items-center d-flex col-md-4">
                            <RadzenLabel Text="Invoice Reference No" />
                        </div>
                        <div class="col-md-8">
                            <RadzenTextBox @bind-Value="invoice.ReferenceNumber" Disabled="false" Placeholder="Invoice Reference" style="width: 100%;" Name="InvoiceRefNo" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="align-items-center d-flex col-md-4">
                            <RadzenLabel Text="Invoice Date" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDatePicker @bind-Value="invoice.InvoiceDate" Disabled="false" Placeholder="Date" style="width: 100%;" Name="InvoiceDate" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="align-items-center d-flex col-md-4">
                            <RadzenLabel Text="Amount" />
                        </div>
                        <div class="col-md-8">
                            <RadzenNumeric @bind-Value="invoice.Amount" Disabled="false" style="width: 100%;" Name="Amount" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="align-items-center d-flex col-md-4">
                            <RadzenLabel Text="Discount Amount" />
                        </div>
                        <div class="col-md-8">
                            <RadzenNumeric @bind-Value="invoice.DiscountAmount" Disabled="false" style="width: 100%;" Name="DiscountAmt" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="align-items-center d-flex col-md-4">
                            <RadzenLabel Text="Payment method" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown @bind-Value="invoice.PaymentMethod" Placeholder="Select payment mode" Data="@(Enum.GetValues(typeof(PayMode)).Cast<PayMode>().Select(t => new { Text = t, Value = t }))" style="width: 100%;" TextProperty="Text" ValueProperty="Value" Name="PaymentMode">
                            </RadzenDropDown>
                        </div>
                    </div>
                    <div class="row">
                        <div class="align-items-center d-flex col-md-4">
                            <RadzenLabel Text="Goods Dispatched?" />
                        </div>
                        <div class="col-md-8">
                            <RadzenCheckBox @bind-Value="invoice.GoodsDelivered" Disabled="false" Placeholder="Items Delivered?" style="width: 5%;" Name="GoodsDispatched" />
                        </div>
                    </div>
                </RadzenFieldset>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" />
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
            </div>
        </div>
    </RadzenTemplateForm>
}

@code {
    InvoiceModel invoice = new InvoiceModel();
    [Parameter] public long Id { get; set; }

    IEnumerable<CustomerModel> customers;


    protected override async Task OnInitializedAsync()
    {
        customers = await Http.GetFromJsonAsync<List<CustomerModel>>("/api/customer");
        invoice = await Http.GetFromJsonAsync<InvoiceModel>("/api/invoice/" + Id);

    }


    private async Task Submit(InvoiceModel arg)
    {
        arg.Customer = await Http.GetFromJsonAsync<CustomerModel>("/api/customer/" + arg.CustomerId);
        await Http.PutAsJsonAsync<InvoiceModel>("/api/invoice", arg);
        navigation.NavigateTo("/invoicecomponent");
    }

    void Cancel()
    {
        navigation.NavigateTo("/invoicecomponent");
    }

    void OnChange(IEnumerable<CustomerModel> value)
    {
        var str = value is IEnumerable<CustomerModel> ? string.Join(", ", value.Select(a => a.FirstName).ToList()) : string.Empty;
    }
}
